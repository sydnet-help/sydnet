theme_bw() + # a theme that looks nice
scale_colour_grey() +  # makes it a bit nicer in black and white
theme(legend.position="none") # gets rid of legend
palette(rainbow(10))
gg <- ggplot(imm10, aes(y = math, x = homework)) +
geom_smooth(method = lm, color = "black") +
geom_point(size = 1.5, alpha = 0.8, colour=factor(imm10$schnum)) +
theme(legend.position="none")
print(gg)
dwplot(model1$coefficients[1:2],colour = "grey60") + # plots the coefficients
geom_vline(xintercept = 0, alpha = .3) +  # puts a transparent grey line at zero
theme_bw() + # a theme that looks nice
scale_colour_grey() +  # makes it a bit nicer in black and white
theme(legend.position="none") # gets rid of legend
dwplot(model1$coefficients[1],colour = "grey60") + # plots the coefficients
geom_vline(xintercept = 0, alpha = .3) +  # puts a transparent grey line at zero
theme_bw() + # a theme that looks nice
scale_colour_grey() +  # makes it a bit nicer in black and white
theme(legend.position="none") # gets rid of legend
dwplot(model1,colour = "grey60") + # plots the coefficients
geom_vline(xintercept = 0, alpha = .3) +  # puts a transparent grey line at zero
theme_bw() + # a theme that looks nice
scale_colour_grey() +  # makes it a bit nicer in black and white
theme(legend.position="none") # gets rid of legend
dotplot(model1,colour = "grey60")
dwplot(model2,colour = "grey60") + # plots the coefficients
geom_vline(xintercept = 0, alpha = .3) +  # puts a transparent grey line at zero
theme_bw() + # a theme that looks nice
scale_colour_grey() +  # makes it a bit nicer in black and white
theme(legend.position="none") # gets rid of legend
# We can now do a simple 'fixed coefficients' multilevel
# model, by running a standard linear regression model
# with schools as dummies
model2 <- lm(math ~ homework + as.factor(schnum), data = imm10)
summary(model2)
# We can visualise this model with the following code:
imm10$FEPredictions <- fitted(model2)
ml_est <- coef(summary(model2))[ , "Estimate"]
ml_se <- coef(summary(model2))[ , "Std. Error"]
palette(rainbow(10))
gg <- ggplot(imm10, aes(y = math, x = homework)) +
geom_line(aes(y = FEPredictions, color=as.factor(schnum))) +
geom_abline(slope = ml_est[2], intercept = ml_est[1], size=1) +
geom_point(size = 1.5, alpha = 0.8, colour=factor(imm10$schnum)) +
theme(legend.position="none")
print(gg)
# draw a dot-and-whisker plot
dwplot(model2,colour = "grey60") + # plots the coefficients
geom_vline(xintercept = 0, alpha = .3) +  # puts a transparent grey line at zero
theme_bw() + # a theme that looks nice
scale_colour_grey() +  # makes it a bit nicer in black and white
theme(legend.position="none") # gets rid of legend
# Source: Table 2.3, page 27, (Kreft and De Leeuw, 1998)
model1 <- lm(math ~ homework, data = imm10)
summary(model1)
# We can visualise this model with a simple graph
palette(rainbow(10))
gg <- ggplot(imm10, aes(y = math, x = homework)) +
geom_smooth(method = lm, color = "black") +
geom_point(size = 1.5, alpha = 0.8, colour=factor(imm10$schnum)) +
theme(legend.position="none")
print(gg)
dotplot(model1,colour = "grey60") + # plots the coefficients
geom_vline(xintercept = 0, alpha = .3) +  # puts a transparent grey line at zero
theme_bw() + # a theme that looks nice
scale_colour_grey() +  # makes it a bit nicer in black and white
theme(legend.position="none") # gets rid of legend
dwplot(model1,colour = "grey60") + # plots the coefficients
geom_vline(xintercept = 0, alpha = .3) +  # puts a transparent grey line at zero
theme_bw() + # a theme that looks nice
scale_colour_grey() +  # makes it a bit nicer in black and white
theme(legend.position="none") # gets rid of legend
model1 <- lm(math ~ homework + ses, data = imm10)
summary(model1)
# We can visualise this model with a simple graph
palette(rainbow(10))
gg <- ggplot(imm10, aes(y = math, x = homework)) +
geom_smooth(method = lm, color = "black") +
geom_point(size = 1.5, alpha = 0.8, colour=factor(imm10$schnum)) +
theme(legend.position="none")
print(gg)
dwplot(model1,colour = "grey60") + # plots the coefficients
geom_vline(xintercept = 0, alpha = .3) +  # puts a transparent grey line at zero
theme_bw() + # a theme that looks nice
scale_colour_grey() +  # makes it a bit nicer in black and white
theme(legend.position="none") # gets rid of legend
dwplot(model1,colour = "grey60") + # plots the coefficients
#  geom_vline(xintercept = 0, alpha = .3) +  # puts a transparent grey line at zero
theme_bw() + # a theme that looks nice
scale_colour_grey() +  # makes it a bit nicer in black and white
theme(legend.position="none") # gets rid of legend
View(model1)
View(model1)
model1 <- lm(math ~ homework, data = imm10)
summary(model1)
# We can visualise this model with a simple graph
palette(rainbow(10))
gg <- ggplot(imm10, aes(y = math, x = homework)) +
geom_smooth(method = lm, color = "black") +
geom_point(size = 1.5, alpha = 0.8, colour=factor(imm10$schnum)) +
theme(legend.position="none")
print(gg)
# We can now do a simple 'fixed coefficients' multilevel
# model, by running a standard linear regression model
# with schools as dummies
model2 <- lm(math ~ homework + as.factor(schnum), data = imm10)
summary(model2)
# We can visualise this model with the following code:
imm10$FEPredictions <- fitted(model2)
ml_est <- coef(summary(model2))[ , "Estimate"]
ml_se <- coef(summary(model2))[ , "Std. Error"]
palette(rainbow(10))
gg <- ggplot(imm10, aes(y = math, x = homework)) +
geom_line(aes(y = FEPredictions, color=as.factor(schnum))) +
geom_abline(slope = ml_est[2], intercept = ml_est[1], size=1) +
geom_point(size = 1.5, alpha = 0.8, colour=factor(imm10$schnum)) +
theme(legend.position="none")
print(gg)
palette(rainbow(10))
gg <- ggplot(imm10, aes(y = math, x = homework)) +
geom_line(aes(y = FEPredictions, color=as.factor(schnum))) +
geom_abline(slope = ml_est[2], intercept = ml_est[1], size=1) +
geom_point(size = 1.5, alpha = 0.8, colour=factor(imm10$schnum)) +
geom_ribbon(aes(ymin=ml_est-ml_se, ymax=ml_est+ml_se))
theme(legend.position="none")
print(gg)
library(readr)
expenses <- read_csv("C:/G/2018, SOCI832/Elise Data/expenses.csv",
col_types = cols(Overseas = col_number(),
col_types = cols(Admin = col_number(),
Car = col_number(), Domestic = col_number(),
Family_Travel = col_number(), Office_Facilities = col_number(),
Overseas = col_number(), Staff = col_number(),
Telecom = col_number(), Travel_Allowance = col_number(),
Unscheduled_Transport = col_number()))
)
library(readr)
expenses <- read_csv("C:/G/2018, SOCI832/Elise Data/expenses.csv",
col_types = cols(Admin = col_number(),
Car = col_number(), Domestic = col_number(),
Family_Travel = col_number(), Office_Facilities = col_number(),
Overseas = col_number(), Staff = col_number(),
Telecom = col_number(), Travel_Allowance = col_number(),
Unscheduled_Transport = col_number()))
View(expenses)
View(expenses)
library(readr)
expenses_matrix <- read_csv("C:/G/2018, SOCI832/Elise Data/expenses_matrix.csv",
col_types = cols(Admin = col_number(),
Car = col_number(), Domestic = col_number(),
Family_Travel = col_number(), Office_Facilities = col_number(),
Overseas = col_number(), Staff = col_number(),
Telecom = col_number(), Travel_Allowance = col_number(),
Unscheduled_Transport = col_number()))
View(expenses_matrix)
#Creating corstars function
corstars <-function(x, method=c("pearson", "spearman"), removeTriangle=c("upper", "lower"),
result=c("none", "html", "latex")){
# SOURCES:
# * http://www.sthda.com/english/wiki/elegant-correlation-table-using-xtable-r-package
# * http://myowelt.blogspot.com/2008/04/beautiful-correlation-tables-in-r.html
# * https://stat.ethz.ch/pipermail/r-help/2008-March/156583.html
#Compute correlation matrix
require(Hmisc)
x <- as.matrix(x)
correlation_matrix<-rcorr(x, type=method[1])
R <- correlation_matrix$r # Matrix of correlation coeficients
p <- correlation_matrix$P # Matrix of p-value
## Define notions for significance levels; spacing is important.
mystars <- ifelse(p < .0001, "****", ifelse(p < .001, "*** ", ifelse(p < .01, "**  ", ifelse(p < .05, "*   ", "    "))))
## trunctuate the correlation matrix to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle of correlation matrix
if(removeTriangle[1]=="upper"){
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove lower triangle of correlation matrix
else if(removeTriangle[1]=="lower"){
Rnew <- as.matrix(Rnew)
Rnew[lower.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove last column and return the correlation matrix
Rnew <- cbind(Rnew[1:length(Rnew)-1])
if (result[1]=="none") return(Rnew)
else{
if(result[1]=="html") print(xtable(Rnew), type="html")
else print(xtable(Rnew), type="latex")
}
}
# Creating correlation matrix
library(xtable)
x <- print(xtable(corstars(expenses_matrix)), type="html")
dput(x, file = "output.html")
browseURL("output.html")
# Creating correlation matrix
library(xtable)
x <- print(xtable(corstars(expenses[,4:ncol(expenses)])), type="html")
dput(x, file = "output.html")
browseURL("output.html")
expenses$total <- (expenses$Travel_Allowance
+ expenses$Overseas
+ expenses$Domestic
+ expenses$Unscheduled_Transport
+ expenses$Car
+ expenses$Office_Facilities
+ expenses$Admin
+ expenses$Telecom
+ expenses$Family_Travel
+ expenses$Staff)
model2 <- lm(expenses$total ~ expenses$Distance expenses$Liberal + expenses$Senator + expenses$Minister + expenses$Shadow + expenses$Green + expenses$Other)
# Creating linear regression model with standardised betas + table for Minister and other significant variables
model2 <- lm(expenses$total ~ expenses$Distance + expenses$Liberal + expenses$Senator + expenses$Minister + expenses$Shadow + expenses$Green + expenses$Other)
summary(model2)
# Creating linear regression model with standardised betas + table for Minister and other significant variables
model2 <- lm(expenses$total ~ expenses$Distance + expenses$Senator + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other)
summary(model2)
library(lm.beta)
model2b <- lm.beta(model2)
summary(model2b)
# Turn off scientific notation
# To turn back on type: options(scipen = 0)
options(scipen = 999)
summary(model2b)
tab_model(model2b)
plot_model(model2, type = "est")
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model2, type = "est")
model2 <- lm(expenses$total ~ expenses$Distance + expenses$Senator + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other + as.factor(expenses$State))
library(lm.beta)
model2b <- lm.beta(model2)
# The regression model
summary(model2b)
expenses$dist_1000km <- expenses$Distance/1000
model2 <- lm(expenses$total ~ expenses$dist_1000km + expenses$MP + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model2b <- lm.beta(model2)
# The regression model
summary(model2b)
# Creating linear regression model with standardised betas + table for Travel_Allowance expenses
model3 <- lm(expenses$Travel_Allowance ~ expenses$dist_1000km + expenses$MP + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model3b <- lm.beta(model3)
# The regression model
summary(model3b)
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model3, type = "est")
# Creating linear regression model with standardised betas + table for Travel_Allowance expenses
model3 <- lm(expenses$Admin ~ expenses$dist_1000km + expenses$MP + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model3b <- lm.beta(model3)
# The regression model
summary(model3b)
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model3, type = "est")
# Creating linear regression model with standardised betas + table for Travel_Allowance expenses
model5 <- lm(expenses$Telecom ~ expenses$dist_1000km + expenses$MP + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model5b <- lm.beta(model5)
# The regression model
summary(model5b)
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model5, type = "est")
# Creating linear regression model with standardised betas + table for total expenses
model1 <- lm(expenses$total ~ expenses$dist_1000km + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model1b <- lm.beta(model1)
# The regression model
summary(model1b)
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model1, type = "est")
invisible(capture.output(stargazer(model1, model2, model3, model4, model5,
type="html",
out="models.htm",
t.auto = FALSE,
single.row = TRUE,
report = "vc*",
digits = 2,
keep.stat=c("n","rsq", "adj.rsq"))))
browseURL("models.htm")
if (!require("stargazer")) install.packages("stargazer")
library(stargazer)
invisible(capture.output(stargazer(model1, model2, model3, model4, model5,
type="html",
out="models.htm",
t.auto = FALSE,
single.row = TRUE,
report = "vc*",
digits = 2,
keep.stat=c("n","rsq", "adj.rsq"))))
browseURL("models.htm")
# Creating linear regression model with standardised betas + table for Travel_Allowance expenses
model4 <- lm(expenses$Admin ~ expenses$dist_1000km + expenses$MP + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model4b <- lm.beta(model4)
# The regression model
summary(model4b)
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model4, type = "est")
invisible(capture.output(stargazer(model1, model2, model3, model4, model5,
type="html",
out="models.htm",
t.auto = FALSE,
single.row = TRUE,
report = "vc*",
digits = 2,
keep.stat=c("n","rsq", "adj.rsq"))))
browseURL("models.htm")
invisible(capture.output(stargazer(model1, model2, model3, model4, model5,
type="html",
out="models.htm",
t.auto = FALSE,
single.row = TRUE,
report = "vcs*",
digits = 2,
keep.stat=c("n","rsq", "adj.rsq"))))
browseURL("models.htm")
invisible(capture.output(stargazer(model1, model2, model3, model4, model5,
type="html",
out="models.htm",
t.auto = FALSE,
single.row = FALSE,
report = "vcs*",
digits = 2,
keep.stat=c("n","rsq", "adj.rsq"))))
browseURL("models.htm")
invisible(capture.output(stargazer(model1, model2, model3, model4, model5,
type="html",
out="models.htm",
t.auto = FALSE,
single.row = FALSE,
report = "vcs*",
digits = -1,
keep.stat=c("n","rsq", "adj.rsq"))))
browseURL("models.htm")
invisible(capture.output(stargazer(model1, model2, model3, model4, model5,
type="html",
out="models.htm",
t.auto = FALSE,
single.row = FALSE,
report = "vcs*",
digits = 0,
keep.stat=c("n","rsq", "adj.rsq"))))
browseURL("models.htm")
# Creating linear regression model with standardised betas + table for Travel_Allowance expenses
model3 <- lm(expenses$Travel_Allowance ~ expenses$dist_1000km + expenses$MP + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model3b <- lm.beta(model3)
# The regression model
summary(model3b)
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model3, type = "est")
# Creating SIMPLE MODEL WITH JUST linear regression model with standardised betas + table for total expenses
model1 <- lm(expenses$total ~ expenses$dist_1000km + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model1b <- lm.beta(model1)
# The regression model
summary(model1b)
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model1, type = "est")
# Creating linear regression model with standardised betas + table for total expenses
model2 <- lm(expenses$total ~ expenses$dist_1000km + expenses$MP + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model2b <- lm.beta(model2)
# The regression model
summary(model2b)
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model2, type = "est")
# Creating linear regression model with standardised betas + table for Travel_Allowance expenses
model3 <- lm(expenses$Travel_Allowance ~ expenses$dist_1000km + expenses$MP + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model3b <- lm.beta(model3)
# The regression model
summary(model3b)
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model3, type = "est")
# Creating linear regression model with standardised betas + table for Travel_Allowance expenses
model4 <- lm(expenses$Admin ~ expenses$dist_1000km + expenses$MP + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model4b <- lm.beta(model4)
# The regression model
summary(model4b)
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model4, type = "est")
# Creating linear regression model with standardised betas + table for Travel_Allowance expenses
model5 <- lm(expenses$Telecom ~ expenses$dist_1000km + expenses$MP + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model5b <- lm.beta(model5)
# The regression model
summary(model5b)
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model5, type = "est")
# Creating linear regression model with standardised betas + table for Travel_Allowance expenses
model6 <- lm(expenses$Domestic ~ expenses$dist_1000km + expenses$MP + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model6b <- lm.beta(model6)
# The regression model
summary(model6b)
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model6, type = "est")
# Creating linear regression model with standardised betas + table for Travel_Allowance expenses
model7 <- lm(expenses$Overseas ~ expenses$dist_1000km + expenses$MP + expenses$Minister + expenses$Shadow + expenses$Labor + expenses$Green + expenses$Other)
library(lm.beta)
model7b <- lm.beta(model7)
# The regression model
summary(model7b)
# Creating scatter plot of significant variables with Minister
library(sjPlot)
plot_model(model7, type = "est")
if (!require("stargazer")) install.packages("stargazer")
library(stargazer)
invisible(capture.output(stargazer(model1, model2, model3, model4, model5,
type="html",
out="models.htm",
t.auto = FALSE,
single.row = FALSE,
report = "vc*",
digits = 0,
keep.stat=c("n","rsq", "adj.rsq"))))
browseURL("models.htm")
invisible(capture.output(stargazer(model1, model2, model3, model4, model5, model6, model7,
type="html",
out="models.htm",
t.auto = FALSE,
single.row = FALSE,
report = "vc*",
digits = 0,
keep.stat=c("n","rsq", "adj.rsq"))))
browseURL("models.htm")
invisible(capture.output(stargazer(model1, model2, model3, model4, model5, model6, model7,
type="html",
out="models.htm",
t.auto = FALSE,
single.row = FALSE,
report = "vc*",
digits = 0,
digits.extra = 2,
keep.stat=c("n","rsq", "adj.rsq"))))
browseURL("models.htm")
invisible(capture.output(stargazer(model1, model2, model3, model4, model5, model6, model7,
type="html",
out="models.htm",
t.auto = FALSE,
single.row = FALSE,
report = "vc*",
digits = 2,
digits.extra = 2,
keep.stat=c("n","rsq", "adj.rsq"))))
browseURL("models.htm")
invisible(capture.output(stargazer(model1, model2, model3, model4, model5, model6, model7,
type="html",
out="models.htm",
t.auto = FALSE,
single.row = FALSE,
report = "vc*",
digits = 2,
keep.stat=c("n","rsq", "adj.rsq"))))
browseURL("models.htm")
library(psych)
fa
fac
## Install from CRAN
install.packages("blogdown")
## Or, install from GitHub
if (!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("rstudio/blogdown")
blogdown::install_hugo()
blogdown::install_hugo(force = TRUE)
install.packages("blogdown")
install.packages("devtools")
install.packages("blogdown")
library(blogdown)
library(devtools)
library(rmarkdown)
blogdown::install_hugo()
blogdown::install_theme(theme = "gcushen/hugo-academic")
blogdown::serve_site()
library(sna)
install.packages
install.packages("sna")
library(sna)
netlm
rmperm
sample
sample.int
.Internal
sample2
.Internal(sample2)
sample
blogdown::serve_site()
setwd("C:/Users/nickh/methods101")
blogdown::serve_site()
